"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[754],{9056:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(641);const p=(0,t.Fv)('<h1 id="文本左右对齐" tabindex="-1"><a class="header-anchor" href="#文本左右对齐"><span>文本左右对齐</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个单词数组 <code>words</code> 和一个长度 <code>maxWidth</code> ，重新排版单词，使其成为每行恰好有 <code>maxWidth</code> 个字符，且左右两端对齐的文本。</p><p>你应该使用 “<strong>贪心算法</strong>” 来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 <code>&#39; &#39;</code> 填充，使得每行恰好有 <em>maxWidth</em> 个字符。</p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p><p><strong>注意:</strong></p><ul><li>单词是指由非空格字符组成的字符序列。</li><li>每个单词的长度大于 0，小于等于 <em>maxWidth</em>。</li><li>输入单词数组 <code>words</code> 至少包含一个单词。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16</p><p><strong>输出：</strong> [</p><p>&quot;This is an&quot;,</p><p>&quot;example of text&quot;,</p><p>&quot;justification. &quot;</p><p>]</p></blockquote>',10),o={id:"试一试",tabindex:"-1"},e={class:"header-anchor",href:"#试一试"},c={href:"https://leetcode.cn/problems/text-justification/submissions/523511444?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fullJustify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">words<span class="token punctuation">,</span> maxWidth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> left <span class="token operator">=</span> right<span class="token punctuation">;</span> <span class="token comment">// 当前行的第一个单词在 words 的位置</span>\n        <span class="token keyword">let</span> sumLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 统计这一行单词长度之和</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> sumLen <span class="token operator">+</span> words<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sumLen <span class="token operator">+=</span> words<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n            right<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> s <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token function">blank</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> numWords <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> numSpaces <span class="token operator">=</span> maxWidth <span class="token operator">-</span> sumLen<span class="token punctuation">;</span>\n\n        <span class="token comment">// 当前行只有一个单词：该单词左对齐，在行末填充空格</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>numWords <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">blank</span><span class="token punctuation">(</span>numSpaces<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 当前行不只一个单词</span>\n        <span class="token keyword">const</span> avgSpaces <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>numSpaces <span class="token operator">/</span> <span class="token punctuation">(</span>numWords <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> extraSpaces <span class="token operator">=</span> numSpaces <span class="token operator">%</span> <span class="token punctuation">(</span>numWords <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> s1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> left <span class="token operator">+</span> extraSpaces <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">blank</span><span class="token punctuation">(</span>avgSpaces <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接额外加一个空格的单词</span>\n        <span class="token keyword">const</span> s2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left <span class="token operator">+</span> extraSpaces <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token function">blank</span><span class="token punctuation">(</span>avgSpaces<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拼接其余单词</span>\n        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token function">blank</span><span class="token punctuation">(</span>avgSpaces<span class="token punctuation">)</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">blank</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("h3",o,[(0,t.Lk)("a",e,[(0,t.Lk)("span",null,[(0,t.Lk)("a",c,[(0,t.eW)("试一试"),(0,t.bF)(a)])])])]),l])}]]),r=JSON.parse('{"path":"/algorithm/array_string/article24.html","title":"文本左右对齐","lang":"zh_CN","frontmatter":{"date":"2024-04-14T00:00:00.000Z","category":["Array / String"],"tag":["Hard"]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713107086000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/array_string/article24.md"}')}}]);