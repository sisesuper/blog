"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[670],{2380:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>l,data:()=>o});var e=s(641);const p=[(0,e.Fv)('<h1 id="语言基础" tabindex="-1"><a class="header-anchor" href="#语言基础"><span>语言基础</span></a></h1><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h3><ul><li><p>第一个字符必须是一个字母、下划线或者一个美元符号</p></li><li><p>其他字符可以是字母、下划线、美元或者数字</p></li></ul><h3 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h3><p>使用：<code>&quot;use strict&quot;</code></p><p>单独指定函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token string">&quot;use strict&quot;</span>\n    <span class="token comment">//函数体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有现代浏览器都支持严格模式</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><h3 id="var" tabindex="-1"><a class="header-anchor" href="#var"><span>var</span></a></h3><ul><li><p>声明作用域为当前函数</p></li><li><p>在函数内部定义变量时省略 <code>var</code> ，可以创建一个全局变量</p></li><li><p><code>var</code> 对变量的声明会提升到函数作用域的顶部</p></li><li><p>反复声明同一个变量名，可理解为提升并合并到函数作用域的顶部</p></li><li><p>全局作用域中声明的变量会作为 <code>window</code> 的属性</p></li></ul><h3 id="let" tabindex="-1"><a class="header-anchor" href="#let"><span>let</span></a></h3><ul><li><p>声明作用域为当前块(块级作用域)</p></li><li><p>let声明的变量，在声明前，不能被使用，存在暂时性死区</p></li><li><p>全局作用域中声明的变量不会作为 <code>window</code> 的属性</p></li><li><p>同一作用域下，不能重复声明</p></li></ul><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const"><span>const</span></a></h3><p>行为与 <code>let</code> 相同，但必须在声明时赋值，且后续不能修改值</p><p>如果初始值是引用类型，则该变量不能再被重新赋值为其他引用值</p><p>如果const定义的变量为对象，那么可以改变对象的属性，但想让整个对象都不能修改,可以使用Object.freeze()</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined"><span>undefined</span></a></h3><p>对未初始化的变量执行 <code>typeof</code> 操作会返回 <code>undefined</code> 值，而对于未声明的变量执行 <code>typeof</code> 操作同样会返回 <code>undefined</code> 值。</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null"><span>null</span></a></h3><p>表示一个空对象指针</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">null</span>\t<span class="token comment">// -&gt; object</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>undefined</strong> 值派生自 <code>null</code> 值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> undefind<span class="token punctuation">)</span>\t<span class="token comment">// -&gt; true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="isfinite" tabindex="-1"><a class="header-anchor" href="#isfinite"><span>isFinite()</span></a></h3><p>测试一个数值是不是无穷值。</p><p><code>Number.NEGATIVE_INFINITY</code>：负无穷 <code>Number.POSITION_INFINITY</code>：正无穷</p><h3 id="nan" tabindex="-1"><a class="header-anchor" href="#nan"><span>NaN</span></a></h3><p>在ECMAScript中，任何数值除以0会返回 <code>NaN</code> 。</p><p><code>isNaN()</code> 接受一个参数，确定这个参数是否”不是数值”。</p><p>不能通过一下方法确定一个值是不是 <code>NaN</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>\t<span class="token comment">// -&gt; false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数值转换" tabindex="-1"><a class="header-anchor" href="#数值转换"><span>数值转换</span></a></h3><p><code>Number()</code></p><ul><li><p>如果是 <code>null</code> ，返回 <code>0</code></p></li><li><p>如果是 <code>undefined</code> ，返回 <code>NaN</code></p></li><li><p>如果是 <code>&quot;&quot;</code> ，返回 <code>0</code></p></li></ul><p><code>parseInt()</code></p><p>从第一个非空格字符开始检测</p><p>如果是 <code>&quot;&quot;</code> ，返回 <code>NaN</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;070&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// -&gt; 70 not 56</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过第二个参数，指定转换基数（进制）默认十进制。</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><ul><li><p>ECMAScript中的字符串是不可变的</p></li><li><p><code>toString()</code></p></li></ul><p>在调用数值的 <code>toString</code> 方法，可以传递一个参数：输出数值的基数。没有 <code>toString</code> 方法的则返回该值的字面量</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// -&gt; &#39;1010&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol类型" tabindex="-1"><a class="header-anchor" href="#symbol类型"><span>symbol类型</span></a></h3><p>Symbol 是一种原始数据类型，用于表示唯一的标识符。每个通过 Symbol() 函数创建的 Symbol 类型的值都是唯一的，即使它们的描述字符串相同也是如此</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个新的 symbol</span>\n<span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建带有描述的 symbol</span>\n<span class="token keyword">const</span> mySymbolWithDescription <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;Description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>唯一性：每个 Symbol 值都是唯一的，即使它们的描述字符串相同也是如此</p></li><li><p>不可变性：Symbol 是不可变的，不能被修改</p></li><li><p>不可枚举：使用 Symbol 定义的属性不会出现在 for…in 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 等方法返回</p></li></ul><h3 id="object类型" tabindex="-1"><a class="header-anchor" href="#object类型"><span>object类型</span></a></h3><p>Object类型的属性方法：</p><ul><li><p>constructor</p></li><li><p>hasOwnProperty(propertyName)</p></li><li><p>isPrototypeOf(obj)</p></li><li><p>propertyIsEnumerable(propertyName)</p></li><li><p>toLocalString()</p></li><li><p>toString()</p></li><li><p>valueOf()</p></li></ul><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h2><p>· <code>++</code> or <code>--</code></p><p>前置与后置的区别</p><p>前置：先自增(减)，再运算</p><p>后置：先运算，再自增(减)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token operator">--</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>\t<span class="token comment">// 21</span>\n<span class="token keyword">var</span> num4 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>\t\t<span class="token comment">// 21</span>\n\n<span class="token keyword">var</span> num5 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> num6 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> num7 <span class="token operator">=</span> num5<span class="token operator">--</span> <span class="token operator">+</span> num6<span class="token punctuation">;</span>\t<span class="token comment">// 22</span>\n<span class="token keyword">var</span> num8 <span class="token operator">=</span> num5 <span class="token operator">+</span> num6<span class="token punctuation">;</span>\t\t<span class="token comment">// 21</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一元加操作符用于强制类型转换，隐式 <code>Number()</code> 效果</li></ul><h3 id="逗号操作符" tabindex="-1"><a class="header-anchor" href="#逗号操作符"><span>逗号操作符</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// num的值为0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="for-in-语句" tabindex="-1"><a class="header-anchor" href="#for-in-语句"><span>for-in 语句</span></a></h3><p><code>for-in</code> 语句是一种严格的迭代语句，可以用来枚举对象的属性。</p><p>通过 <code>for-in</code> 循环输出的属性名的顺序是不可预测的。</p><p>如果要迭代的对象的变量值为 <code>null</code> 或 <code>undefined</code> ， 则不执行循环体。</p><h3 id="for-of-语句" tabindex="-1"><a class="header-anchor" href="#for-of-语句"><span>for-of 语句</span></a></h3><p><code>for-in</code> 语句是一种严格的迭代语句，可用来遍历可迭代对象的元素。</p><p>本质是调用可迭代对象的 <code>next()</code> 方法产生迭代值</p><h3 id="with" tabindex="-1"><a class="header-anchor" href="#with"><span>with</span></a></h3><p>将代码作用域设置为特点的对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">with</span> <span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment">//jack</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>   <span class="token comment">//19</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span>   <span class="token comment">//male</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',72)],t={},l=(0,s(6262).A)(t,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),o=JSON.parse('{"path":"/jsBase/lang_base.html","title":"语言基础","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":3,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]}]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"var","slug":"var","link":"#var","children":[]},{"level":3,"title":"let","slug":"let","link":"#let","children":[]},{"level":3,"title":"const","slug":"const","link":"#const","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"undefined","slug":"undefined","link":"#undefined","children":[]},{"level":3,"title":"null","slug":"null","link":"#null","children":[]},{"level":3,"title":"isFinite()","slug":"isfinite","link":"#isfinite","children":[]},{"level":3,"title":"NaN","slug":"nan","link":"#nan","children":[]},{"level":3,"title":"数值转换","slug":"数值转换","link":"#数值转换","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"symbol类型","slug":"symbol类型","link":"#symbol类型","children":[]},{"level":3,"title":"object类型","slug":"object类型","link":"#object类型","children":[]}]},{"level":2,"title":"操作符","slug":"操作符","link":"#操作符","children":[{"level":3,"title":"逗号操作符","slug":"逗号操作符","link":"#逗号操作符","children":[]},{"level":3,"title":"for-in 语句","slug":"for-in-语句","link":"#for-in-语句","children":[]},{"level":3,"title":"for-of 语句","slug":"for-of-语句","link":"#for-of-语句","children":[]},{"level":3,"title":"with","slug":"with","link":"#with","children":[]}]}],"git":{"updatedTime":1713835095000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":4}]},"filePathRelative":"jsBase/lang_base.md"}')}}]);