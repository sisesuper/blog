"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[85],{8755:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(641);const e=[(0,t.Lk)("h1",{id:"合并两个有序数组",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#合并两个有序数组"},[(0,t.Lk)("span",null,"合并两个有序数组")])],-1),(0,t.Lk)("p",null,"测试自动部署！！！",-1),(0,t.Lk)("p",null,"再次测试！！！",-1),(0,t.Lk)("p",null,"再来！！",-1),(0,t.Lk)("p",null,"再次测试！！！！",-1)],p={},o=(0,a(6262).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/VueBase/article1.html","title":"合并两个有序数组","lang":"zh_CN","frontmatter":{},"headers":[],"git":{"updatedTime":1714128018000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"VueBase/article1.md"}')},2047:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var t=a(641);const e={id:"合并两个有序数组",tabindex:"-1"},p={class:"header-anchor",href:"#合并两个有序数组"},o=(0,t.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code> ，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意</strong> ：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</p><p>输出：[1,2,2,3,5,6]</p><p>解释：需要合并 [1,2,3] 和 [2,5,6] 。</p><p>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</p></blockquote>',6),c={id:"试一试",tabindex:"-1"},l={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/merge-sorted-array/submissions/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>通过比较 <code>num1</code> 的最大值和 <code>num2</code> 的最大值，把较大的值添加到结果数组 <code>ret</code> 的头部，若相等，则添加 <code>num1</code> 中的值，然后在原数组中删除该值，再进行下一次比较</p></li><li><p>当其中一个数组已经全部加入 <code>ret</code> 时，把另一个数组的剩余值按原顺序加入 <code>ret</code> 的头部即可</p></li><li><p>设置两个指针指向 <code>num1</code> 和 <code>num2</code> 各自的最大值，由于 <code>num1</code> 和 <code>num2</code> 都是非递减顺序排列，所以指针可设置为 <code>m-1</code> 和 <code>n-1</code></p></li><li><p>把删除最大的操作替换为 <code>m--</code> 或 <code>n--</code> ，即可使指针指向下一个最大值</p></li><li><p>当 <code>n=0</code> 或 <code>m=0</code> 时，表明该数组已全部加入 <code>ret </code>中</p></li><li><p>把 <code>ret</code> 数组中的值，复制到 <code>num1</code> 中</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums1</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">m</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums2</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify nums1 in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 临时存放合并结果</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// num1已经全部合并到ret中</span>\n                ret<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>nums2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 截取num2的剩余部分，添加到ret的头部</span>\n                <span class="token keyword">break</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ret<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>nums1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">break</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ret<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 把num1和num2的最大值添加到ret的头部</span>\n                m<span class="token operator">--</span> <span class="token comment">// 移动最大值指针到下一个最大值</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                ret<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                n<span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 把ret数组中的值，复制到num1中</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),r={},k=(0,a(6262).A)(r,[["render",function(n,s){const a=(0,t.g2)("Badge"),r=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("h1",e,[(0,t.Lk)("a",p,[(0,t.Lk)("span",null,[(0,t.eW)("合并两个有序数组 "),(0,t.bF)(a,{text:"简单"})])])]),o,(0,t.Lk)("h3",c,[(0,t.Lk)("a",l,[(0,t.Lk)("span",null,[(0,t.Lk)("a",i,[(0,t.eW)("试一试"),(0,t.bF)(r)])])])]),u])}]]),d=JSON.parse('{"path":"/algorithm/array_string/article1.html","title":"合并两个有序数组","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713160658000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"algorithm/array_string/article1.md"}')},516:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var t=a(641);const e={id:"验证回文串",tabindex:"-1"},p={class:"header-anchor",href:"#验证回文串"},o=(0,t.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code> ，如果它是 <strong>回文串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> s = &quot;A man, a plan, a canal: Panama&quot;</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong> &quot;amanaplanacanalpanama&quot; 是回文串。</p></blockquote>',6),c={id:"试一试",tabindex:"-1"},l={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/valid-palindrome/submissions/523629870?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>使用正则表达式清处非英文字母和数字的字符，并转换为小写</p></li><li><p>定义两个指针分别指向字符串首尾</p></li><li><p>比较首位指针对应的值是否相等</p></li><li><p>不相等则返回 <code>false</code> ，相等则向内移动一位，直到两指针重合或错位</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span> <span class="token comment">// 定义一个模式，匹配大小写字母和数字的字符</span>\n        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// （此时含有大写字母）将字符串中，非大小写字母和数字的字符替换为“”，然后再其转换为小写形式</span>\n        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 定义两个指针分别指向字符串首尾</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 两指针重合或错位时结束</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!==</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 比较首位指针对应的值是否相等</span>\n                <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">//  不相等则返回false</span>\n            <span class="token punctuation">}</span>\n            left<span class="token operator">++</span> <span class="token comment">// 相等则向内移动一位</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),r={},k=(0,a(6262).A)(r,[["render",function(n,s){const a=(0,t.g2)("Badge"),r=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("h1",e,[(0,t.Lk)("a",p,[(0,t.Lk)("span",null,[(0,t.eW)("验证回文串 "),(0,t.bF)(a,{text:"简单"})])])]),o,(0,t.Lk)("h3",c,[(0,t.Lk)("a",l,[(0,t.Lk)("span",null,[(0,t.Lk)("a",i,[(0,t.eW)("试一试"),(0,t.bF)(r)])])])]),u])}]]),d=JSON.parse('{"path":"/algorithm/doublePoints/article1.html","title":"验证回文串","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1714113579000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":4}]},"filePathRelative":"algorithm/doublePoints/article1.md"}')},9328:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(641);const e=(0,t.Fv)('<h1 id="赎金信" tabindex="-1"><a class="header-anchor" href="#赎金信"><span>赎金信</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</p><p><strong>输出：</strong> false</p></blockquote>',7),p={id:"试一试",tabindex:"-1"},o={class:"header-anchor",href:"#试一试"},c={href:"https://leetcode.cn/problems/ransom-note/submissions/525583888?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">board</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isValidSudoku</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> blockIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">||</span> block<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>blockIndex <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token boolean">false</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                        y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                        block<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blockIndex <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("h3",p,[(0,t.Lk)("a",o,[(0,t.Lk)("span",null,[(0,t.Lk)("a",c,[(0,t.eW)("试一试"),(0,t.bF)(a)])])])]),l])}]]),r=JSON.parse('{"path":"/algorithm/hash/article1.html","title":"赎金信","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713667554000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/hash/article1.md"}')},4154:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(641);const e=(0,t.Fv)('<h1 id="汇总区间" tabindex="-1"><a class="header-anchor" href="#汇总区间"><span>汇总区间</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个 <strong>无重复元素</strong> 的 <strong>有序</strong> 整数数组 <code>nums</code> 。</p><p>返回 <strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表 。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p><p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p><ul><li><code>&quot;a-&gt;b&quot;</code> ，如果 <code>a != b</code></li><li><code>&quot;a&quot;</code> ，如果 <code>a == b</code></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> nums = [0,1,2,4,5,7]</p><p><strong>输出：</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]</p><p><strong>解释：</strong> 区间范围是：</p><p>[0,2] --&gt; &quot;0-&gt;2&quot;</p><p>[4,5] --&gt; &quot;4-&gt;5&quot;</p><p>[7,7] --&gt; &quot;7&quot;</p></blockquote>',8),p={id:"试一试",tabindex:"-1"},o={class:"header-anchor",href:"#试一试"},c={href:"https://leetcode.cn/problems/summary-ranges/submissions/527255684?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">summaryRanges</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                text <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    text<span class="token operator">+=</span><span class="token string">&quot;-&gt;&quot;</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n                text<span class="token operator">=</span><span class="token string">&quot;&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> arr\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("h3",p,[(0,t.Lk)("a",o,[(0,t.Lk)("span",null,[(0,t.Lk)("a",c,[(0,t.eW)("试一试"),(0,t.bF)(a)])])])]),l])}]]),r=JSON.parse('{"path":"/algorithm/interval/article1.html","title":"汇总区间","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1714107483000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/interval/article1.md"}')},4473:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>k});var t=a(641);const e=a.p+"assets/img/img.96c1ac3e.png",p=(0,t.Fv)('<h1 id="有效的数独" tabindex="-1"><a class="header-anchor" href="#有效的数独"><span>有效的数独</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>请你判断一个 <code>9 x 9</code> 的数独是否有效。只需要 <strong>根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p><ol><li><p>数字 <code>1-9</code> 在每一行只能出现一次。</p></li><li><p>数字 <code>1-9</code> 在每一列只能出现一次。</p></li><li><p>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</p></li></ol><p><strong>注意：</strong></p><ul><li><p>一个有效的数独（部分已被填充）不一定是可解的。</p></li><li><p>只需要根据以上规则，验证已经填入的数字是否有效即可。</p></li><li><p>空白格用 <code>&#39;.&#39;</code> 表示。</p></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><img src="'+e+'" alt="img.png"></p><blockquote><p><strong>输入：</strong> board =</p><p>[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</p><p>,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</p><p>,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</p><p>,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</p><p>,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</p><p>,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</p><p>,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</p><p>,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</p><p>,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</p><p><strong>输出：</strong> true</p></blockquote>',9),o={id:"试一试",tabindex:"-1"},c={class:"header-anchor",href:"#试一试"},l={href:"https://leetcode.cn/problems/valid-sudoku/submissions/524781607?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">board</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isValidSudoku</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">board</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> blockIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">||</span> block<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>blockIndex <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token boolean">false</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                        y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                        block<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blockIndex <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),u={},r=(0,a(6262).A)(u,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.Lk)("h3",o,[(0,t.Lk)("a",c,[(0,t.Lk)("span",null,[(0,t.Lk)("a",l,[(0,t.eW)("试一试"),(0,t.bF)(a)])])])]),i])}]]),k=JSON.parse('{"path":"/algorithm/matrix/article1.html","title":"有效的数独","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713419571000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/matrix/article1.md"}')},1617:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(641);const e=(0,t.Fv)('<h1 id="长度最小的子数组" tabindex="-1"><a class="header-anchor" href="#长度最小的子数组"><span>长度最小的子数组</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续</strong> 子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> target = 7, nums = [2,3,1,2,4,3]</p><p><strong>输出：</strong> 2</p><p><strong>解释：</strong> 子数组 [4,3] 是该条件下的长度最小的子数组。</p></blockquote>',6),p={id:"试一试",tabindex:"-1"},o={class:"header-anchor",href:"#试一试"},c={href:"https://leetcode.cn/problems/minimum-size-subarray-sum/submissions/524493631?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> ans <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span> sum <span class="token operator">-</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span>target<span class="token punctuation">)</span>\n                ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ans <span class="token operator">&lt;=</span> n <span class="token operator">?</span> ans <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("h3",p,[(0,t.Lk)("a",o,[(0,t.Lk)("span",null,[(0,t.Lk)("a",c,[(0,t.eW)("试一试"),(0,t.bF)(a)])])])]),l])}]]),r=JSON.parse('{"path":"/algorithm/slidingWindow/article1.html","title":"长度最小的子数组","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713344219000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/slidingWindow/article1.md"}')},7702:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(641);const e=[(0,t.Fv)('<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><p><strong>匹配符：</strong></p><ul><li><p>d? d出现0/1次</p></li><li><p>a* a可以出现0/多次</p></li><li><p>a+ a出现一次以上</p></li><li><p>a{6} a出现6次</p></li><li><p>a{2,} a出现2次以上</p></li><li><p>a{2,6} a出现2-6次</p></li></ul><p><strong>匹配多个字符：</strong></p><ul><li>(ab)+ ab出现一次以上</li></ul><p><strong>或运算：</strong></p><ul><li><p>a (cat|dog) 匹配 a cat or a dog</p></li><li><p>a cat|dog 匹配 a cat or dog</p></li></ul><p><strong>字符类：</strong></p><ul><li><p>匹配由abc构成的数据,[abc]+ 匹配abc出现一次以上，如 abc aabbcc</p></li><li><p>[a-zA-Z0-9] 匹配由a-ABCabc123,有的字符可以不出现</p></li><li><p>^ 排除 [^0-9] 匹配0-9之外的数据(包括换行符)</p></li></ul><p><strong>元字符：</strong></p><ul><li><p>\\d 数字字符 \\d+ 匹配一个以上的数字</p></li><li><p>\\D 非数字字符</p></li><li><p>\\w 单词字符 单词 数字 下划线即英文字符</p></li><li><p>\\W 非单词字符</p></li><li><p>\\s 空白符 包含空格和换行符</p></li><li><p>\\S 非空白字符</p></li><li><p>\\b 单词的边界 单词的开头或结尾 单词与符号之前的边界</p></li><li><p>\\B 非单词的边界 符号与符号 单词与单词的边界</p></li><li><p>. 任意字符不包含换行符</p></li><li><p>. 表示. 通过\\进行了转意</p></li><li><p>^ 匹配行首 $ 匹配行尾</p></li></ul>',11)],p={},o=(0,a(6262).A)(p,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/others/article1.html","title":"正则表达式","lang":"zh_CN","frontmatter":{},"headers":[],"git":{"updatedTime":1714107483000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"others/article1.md"}')},9547:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(641);const e=(0,t.Lk)("h1",{id:"旺山实业机电运维小程序项目",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#旺山实业机电运维小程序项目"},[(0,t.Lk)("span",null,"旺⼭实业机电运维小程序项目")])],-1),p={href:"http://www.wangshan.com/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Lk)("p",null,"2023.2-2023.5",-1),c=(0,t.Lk)("p",null,"Web前端",-1),l=(0,t.Fv)('<h2 id="项目背景" tabindex="-1"><a class="header-anchor" href="#项目背景"><span>项目背景</span></a></h2><ul><li>重庆旺山实业有限公司负责重庆市的高速公路的巡查检修工作</li><li>高速公路总长超过 <code>4200</code> 公里</li><li>有众多监控设备、通信设备、照明设备、防灾设备等</li><li>依靠人工和纸质文档进行运维工作,存在效率低下、响应慢、难以规范管理等问题。</li></ul><h2 id="项目描述" tabindex="-1"><a class="header-anchor" href="#项目描述"><span>项目描述</span></a></h2><ul><li>项⽬是由重庆旺⼭实业有限公司与重庆市交通局以及百度地图合作</li><li>巡检人员将巡检过程中发现的问题在小程序中采集和上报</li><li>管理人员下发和指派任务对问题进⾏处理。</li><li>在小程序中统一管理公司的运维车辆、设备配件等巡检资源</li><li>后端项⽬采⽤ <code>JeeSite</code> 框架打造，前端采用 <code>Uni-App</code> 制作微信小程序。</li></ul><h2 id="工作职责" tabindex="-1"><a class="header-anchor" href="#工作职责"><span>工作职责</span></a></h2><ul><li>负责问题、任务上报等表单类页面的绘制，利用组件实现文件上传</li><li>负责详情类展示页面的绘制，实现列表的下拉刷新，分页展示以及页面防抖</li><li>与后端人员沟通，完成页面相关接口的设计及调用</li><li>整合整个小程序页面，协调页面间的数据传输</li></ul><h2 id="涉及技术" tabindex="-1"><a class="header-anchor" href="#涉及技术"><span>涉及技术</span></a></h2><p><code>Vue</code>、<code>Uni-App</code>、<code>uView</code>、<code>ApiFox</code>、<code>Axios</code>、<code>Git</code> 等</p><h2 id="项目收获" tabindex="-1"><a class="header-anchor" href="#项目收获"><span>项目收获</span></a></h2><ul><li>加深对小程序的制作和运行原理的认识</li><li>对软件工程项⽬的流程、分工有了具体的感受</li><li>增强了我的代码规范，以及修复 <code>BUG</code> 的能力</li><li>锻炼了我的团队协作能⼒以及管理能⼒</li></ul>',10),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.Lk)("a",p,[(0,t.eW)("重庆旺山实业有限公司"),(0,t.bF)(a)])]),o,c]),l])}]]),r=JSON.parse('{"path":"/projects/article1.html","title":"旺⼭实业机电运维小程序项目","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"项目背景","slug":"项目背景","link":"#项目背景","children":[]},{"level":2,"title":"项目描述","slug":"项目描述","link":"#项目描述","children":[]},{"level":2,"title":"工作职责","slug":"工作职责","link":"#工作职责","children":[]},{"level":2,"title":"涉及技术","slug":"涉及技术","link":"#涉及技术","children":[]},{"level":2,"title":"项目收获","slug":"项目收获","link":"#项目收获","children":[]}],"git":{"updatedTime":1714128018000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"projects/article1.md"}')}}]);