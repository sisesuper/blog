"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[906],{5690:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var e=a(641);const t={id:"删除有序数组中的重复项-ii",tabindex:"-1"},p={class:"header-anchor",href:"#删除有序数组中的重复项-ii"},o=(0,e.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个有序数组 <code>nums</code> ，请你 <strong><span style="color:blue;">原地</span></strong> 删除重复出现的元素，使得出现次数超过两次的元素 <strong>只出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><span style="color:blue;">原地</span></strong> <strong>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p>示例 1：</p><p>输入：nums = [1,1,1,2,2,3]</p><p>输出：5, nums = [1,1,2,2,3]</p><p>解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。</p></blockquote>',5),c={id:"试一试",tabindex:"-1"},l={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>由于 <code>nums</code> 按非严格递增排列，所以如果有重复性出现，肯定是相邻的</p></li><li><p>遍历 <code>nums</code> ，<code>nums[i]</code> 表示当前元素，设置指针 <code>j</code> 指向前一个元素的下标</p></li><li><p>设置 <code>times</code> 来记录某一个重复元素的数量，若 <code>nums[i]=nums[j]</code> ，则更新 <code>times</code></p></li><li><p>判断 <code>times</code> 的值，达到三个时，删除当前元素 <code>nums[i]</code>,更新 <code>times</code></p></li><li><p>此时 <code>nums[i]</code> 变为了新的值，执行 <code>i--</code> ，确保下一次循环能够比较到新的 <code>nums[i]</code></p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 指向前一个元素的下标</span>\n        <span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 记录某一个重复元素的数量</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                times<span class="token operator">++</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                times <span class="token operator">=</span> <span class="token number">1</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 删除当前元素nums[i]</span>\n                i<span class="token operator">--</span>\n                j<span class="token operator">--</span>\n                times<span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),r={},k=(0,a(6262).A)(r,[["render",function(n,s){const a=(0,e.g2)("Badge"),r=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[(0,e.eW)("删除有序数组中的重复项 II "),(0,e.bF)(a,{text:"中等",type:"warning"})])])]),o,(0,e.Lk)("h3",c,[(0,e.Lk)("a",l,[(0,e.Lk)("span",null,[(0,e.Lk)("a",i,[(0,e.eW)("试一试"),(0,e.bF)(r)])])])]),u])}]]),d=JSON.parse('{"path":"/algorithm/array_string/article4.html","title":"删除有序数组中的重复项 II","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713160658000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"algorithm/array_string/article4.md"}')},8018:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>d,data:()=>m});var e=a(641);const t=a.p+"assets/img/img.e7499330.png",p={id:"盛最多水的容器",tabindex:"-1"},o={class:"header-anchor",href:"#盛最多水的容器"},c=(0,e.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong> 你不能倾斜容器。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><img src="'+t+'" alt="img.png"></p><blockquote><p><strong>输入：</strong> [1,8,6,2,5,4,8,3,7]</p><p><strong>输出：</strong> 49</p><p><strong>解释：</strong> 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p></blockquote>',8),l={id:"试一试",tabindex:"-1"},i={class:"header-anchor",href:"#试一试"},u={href:"https://leetcode.cn/problems/container-with-most-water/submissions/524095160?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>设置两个指针 <code>left</code>，<code>right</code> 分别指向数组两端</p></li><li><p>当前的 <code>left</code> 和 <code>right</code> 指针为边界时，能盛的水为 <code>(right - left) * Math.min(height[left], height[right])</code></p></li><li><p>维护 <code>water</code>，作为最多能装的水</p></li><li><p>总是把较短的那个指针向内移动</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">height</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//两个指针left，right分别指向数组两端</span>\n            water <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            water <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>water<span class="token punctuation">,</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//更新最多能装的水</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 把较短的那个指针向内移动</span>\n                right<span class="token operator">--</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                left<span class="token operator">++</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> water\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),k={},d=(0,a(6262).A)(k,[["render",function(n,s){const a=(0,e.g2)("Badge"),t=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",p,[(0,e.Lk)("a",o,[(0,e.Lk)("span",null,[(0,e.eW)("盛最多水的容器 "),(0,e.bF)(a,{text:"中等",type:"warning"})])])]),c,(0,e.Lk)("h3",l,[(0,e.Lk)("a",i,[(0,e.Lk)("span",null,[(0,e.Lk)("a",u,[(0,e.eW)("试一试"),(0,e.bF)(t)])])])]),r])}]]),m=JSON.parse('{"path":"/algorithm/doublePoints/article4.html","title":"盛最多水的容器","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1714199364000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":3}]},"filePathRelative":"algorithm/doublePoints/article4.md"}')},849:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var e=a(641);const t=(0,e.Fv)('<h1 id="有效的字母异位词" tabindex="-1"><a class="header-anchor" href="#有效的字母异位词"><span>有效的字母异位词</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p><p>注意：若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> s = &quot;anagram&quot;, t = &quot;nagaram&quot;</p><p><strong>输出：</strong> true</p></blockquote>',6),p={id:"试一试",tabindex:"-1"},o={class:"header-anchor",href:"#试一试"},c={href:"https://leetcode.cn/problems/valid-anagram/submissions/526200487?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">t</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">isAnagram</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">!=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>\n            <span class="token keyword">let</span> letter <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> letter <span class="token operator">?</span> letter <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            letter <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> letter <span class="token operator">?</span> letter <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),i={},u=(0,a(6262).A)(i,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[t,(0,e.Lk)("h3",p,[(0,e.Lk)("a",o,[(0,e.Lk)("span",null,[(0,e.Lk)("a",c,[(0,e.eW)("试一试"),(0,e.bF)(a)])])])]),l])}]]),r=JSON.parse('{"path":"/algorithm/hash/article4.html","title":"有效的字母异位词","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713849705000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":3}]},"filePathRelative":"algorithm/hash/article4.md"}')},207:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>k});var e=a(641);const t=a.p+"assets/img/img_3.5b277764.png",p=(0,e.Fv)('<h1 id="矩阵置零" tabindex="-1"><a class="header-anchor" href="#矩阵置零"><span>矩阵置零</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给定一个 <code>m x n</code> 的矩阵，如果一个元素为 <code>0</code> ，则将其所在行和列的所有元素都设为 <code>0</code> 。请使用 <strong>原地</strong> 算法。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><img src="'+t+'" alt="img_3.png"></p><blockquote><p><strong>输入：</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]</p><p><strong>输出：</strong> [[1,0,1],[0,0,0],[1,0,1]]</p></blockquote>',6),o={id:"试一试",tabindex:"-1"},c={class:"header-anchor",href:"#试一试"},l={href:"https://leetcode.cn/problems/set-matrix-zeroes/submissions/525452332?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Fv)('<h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">matrix</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify matrix in-place instead.\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">setZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length\n        <span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n                    y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> xindex <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            <span class="token keyword">let</span> yindex <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n            matrix<span class="token punctuation">[</span>xindex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>yindex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),u={},r=(0,a(6262).A)(u,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[p,(0,e.Lk)("h3",o,[(0,e.Lk)("a",c,[(0,e.Lk)("span",null,[(0,e.Lk)("a",l,[(0,e.eW)("试一试"),(0,e.bF)(a)])])])]),i])}]]),k=JSON.parse('{"path":"/algorithm/matrix/article4.html","title":"矩阵置零","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713604498000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":1}]},"filePathRelative":"algorithm/matrix/article4.md"}')}}]);