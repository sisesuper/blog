"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[382],{1064:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var t=a(641);const e={id:"最后一个单词的长度",tabindex:"-1"},p={class:"header-anchor",href:"#最后一个单词的长度"},o=(0,t.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 <strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入</strong>：s = &quot;Hello World&quot;</p><p><strong>输出</strong>：5</p><p><strong>解释</strong>：最后一个单词是“World”，长度为5。</p></blockquote>',5),l={id:"试一试",tabindex:"-1"},c={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/length-of-last-word/submissions/522744019?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><p><strong>方法一</strong></p><ul><li><p>去掉 <code>s</code> 两端的空格，以空格为分隔符，把字符串转换为数组</p></li><li><p>返回数组最后一个元素的长度</p></li></ul><p><strong>方法二</strong></p><ul><li><p>从后到前遍历字符串</p></li><li><p>从第一个非字符元素开始计数，到下一个空格或头部时结束</p></li><li><p>返回计数结果</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><p><strong>方法一</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLastWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 去掉s两端的空格</span>\n        <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token comment">// 以空格为分隔符，把字符串转换为数组</span>\n        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token comment">// 返回数组最后一个元素的长度</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">lengthOfLastWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 从后到前遍历字符串</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> start <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token comment">// 遇到第一个非空格字符，开始计数</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">//遇到下一个空歌时结束</span>\n            count<span class="token operator">++</span> <span class="token comment">// 计数</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> count\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',10),u={},k=(0,a(6262).A)(u,[["render",function(n,s){const a=(0,t.g2)("Badge"),u=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("h1",e,[(0,t.Lk)("a",p,[(0,t.Lk)("span",null,[(0,t.eW)("最后一个单词的长度 "),(0,t.bF)(a,{text:"简单"})])])]),o,(0,t.Lk)("h3",l,[(0,t.Lk)("a",c,[(0,t.Lk)("span",null,[(0,t.Lk)("a",i,[(0,t.eW)("试一试"),(0,t.bF)(u)])])])]),r])}]]),d=JSON.parse('{"path":"/algorithm/array_string/article19.html","title":"最后一个单词的长度","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713849705000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"algorithm/array_string/article19.md"}')}}]);