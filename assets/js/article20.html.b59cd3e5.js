"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[886],{5951:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var t=a(641);const e={id:"最长公共前缀",tabindex:"-1"},p={class:"header-anchor",href:"#最长公共前缀"},o=(0,t.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入</strong>：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</p><p><strong>输出</strong>：&quot;fl&quot;</p></blockquote>',5),l={id:"试一试",tabindex:"-1"},c={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/longest-common-prefix/submissions/522748343?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>对数组元素按字符顺序排序</p></li><li><p>对比第一个元素与最后一个元素的字符串</p></li><li><p>他们的公共前缀就是最长公共前缀</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">strs</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">longestCommonPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        strs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对数组元素按字符顺序排序</span>\n        <span class="token keyword">let</span> common <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n        <span class="token keyword">let</span> first <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 数组第一个元素</span>\n        <span class="token keyword">let</span> last <span class="token operator">=</span> strs<span class="token punctuation">[</span>strs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 数组最后一个元素</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>first<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 求他们的公共前缀</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                common<span class="token operator">+=</span>first<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                <span class="token keyword">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> common\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),u={},k=(0,a(6262).A)(u,[["render",function(n,s){const a=(0,t.g2)("Badge"),u=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.Lk)("h1",e,[(0,t.Lk)("a",p,[(0,t.Lk)("span",null,[(0,t.eW)("最长公共前缀 "),(0,t.bF)(a,{text:"简单"})])])]),o,(0,t.Lk)("h3",l,[(0,t.Lk)("a",c,[(0,t.Lk)("span",null,[(0,t.Lk)("a",i,[(0,t.eW)("试一试"),(0,t.bF)(u)])])])]),r])}]]),d=JSON.parse('{"path":"/algorithm/array_string/article20.html","title":"最长公共前缀","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713849705000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"algorithm/array_string/article20.md"}')}}]);