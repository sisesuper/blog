"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[175],{8513:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>k});var e=a(641);const t={id:"o-1-时间插入、删除和获取随机元素",tabindex:"-1"},p={class:"header-anchor",href:"#o-1-时间插入、删除和获取随机元素"},o=(0,e.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>实现 <code>RandomizedSet</code> 类：</p><ul><li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li><li><code>bool insert(int val) </code>当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li><li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li></ul><p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p>输入</p><p>[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</p><p>[[], [1], [2], [2], [], [1], [2], []]</p><p>输出</p><p>[null, true, false, true, 2, true, false, 2]</p></blockquote><p><strong>解释</strong></p><ul><li><p>RandomizedSet randomizedSet = new RandomizedSet();</p></li><li><p>randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。</p></li><li><p>randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。</p></li><li><p>randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。</p></li><li><p>randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。</p></li><li><p>randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。</p></li><li><p>randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。</p></li><li><p>randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。</p></li></ul>',8),c={id:"试一试",tabindex:"-1"},l={class:"header-anchor",href:"#试一试"},i={href:"https://leetcode.cn/problems/insert-delete-getrandom-o1/submissions/521401459?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>使用 <code>Array</code> 储存添加的数据，使用 <code>Map</code> ，查询数据的数组索引，可以提高速率</p></li><li><p>在 <code>Map</code> 中存储 <code>数据-索引</code> 这样的键值对，可以通过数据查找索引，然后直接对数组索引进行操作，避免遍历数组查找元素</p></li><li><p>插入，把数据存入数组，增加 <code>map</code> 的 <code>数据-索引</code> 键值对</p></li><li><p>删除，移除并获取数组最后一个数据 <code>last</code> ，如果是要删除的数据，直接删除 <code>map</code> 中的索引</p></li><li><p>如果不是，就查询 <code>map</code> ，找到指定删除数据的下标，把要删除的元素替换为 <code>last</code> ,在修改 <code>map</code> 中存储的索引，直接删除 <code>map</code> 中关于要删除数据的索引</p></li><li><p>随机获取，用 <code>floor()</code> 和 <code>random() </code>函数，生成随机数组下标，直接返回数组中该下标数据</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">RandomizedSet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用Map查询数据</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用Array储存添加的数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">RandomizedSet</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 判断是否已经存在</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//增加map中 &quot;数据-索引&quot; 键值对</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 把数据存入数组</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">RandomizedSet</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 判断是否不存在</span>\n    <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 移除并获取数组最后一个数据last</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 找到val的下标</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// last不是要删除的元素</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> last  <span class="token comment">// 把val替换为last</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>last<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token comment">//更新map中关于last的索引</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 删除map中关于val的索引</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">RandomizedSet</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getRandom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 用floor和random函数，生成随机数组下标</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token comment">// 返回数组中该下标数据</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),d={},r=(0,a(6262).A)(d,[["render",function(n,s){const a=(0,e.g2)("Badge"),d=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",p,[(0,e.Lk)("span",null,[(0,e.eW)("O(1) 时间插入、删除和获取随机元素 "),(0,e.bF)(a,{text:"中等",type:"warning"})])])]),o,(0,e.Lk)("h3",c,[(0,e.Lk)("a",l,[(0,e.Lk)("span",null,[(0,e.Lk)("a",i,[(0,e.eW)("试一试"),(0,e.bF)(d)])])])]),u])}]]),k=JSON.parse('{"path":"/algorithm/array_string/article12.html","title":"O(1) 时间插入、删除和获取随机元素","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713525572000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":3}]},"filePathRelative":"algorithm/array_string/article12.md"}')}}]);