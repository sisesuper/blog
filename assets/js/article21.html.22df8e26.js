"use strict";(self.webpackChunkalgorithm_doc=self.webpackChunkalgorithm_doc||[]).push([[933],{5296:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>k});var e=a(641);const t={id:"反转字符串中的单词",tabindex:"-1"},o={class:"header-anchor",href:"#反转字符串中的单词"},p=(0,e.Fv)('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong> 输入字符串 <code>s</code> 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><blockquote><p><strong>输入：</strong> s = &quot;<code>the sky is blue</code>&quot;</p><p><strong>输出：</strong> &quot;<code>blue is sky the</code>&quot;</p></blockquote>',7),c={id:"试一试",tabindex:"-1"},l={class:"header-anchor",href:"#试一试"},r={href:"https://leetcode.cn/problems/reverse-words-in-a-string/submissions/523087196?envType=study-plan-v2&envId=top-interview-150",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Fv)('<h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><ul><li><p>从后到前遍历字符串 <code>s</code></p></li><li><p>维护 <code>word</code>，作为当前的一个单词，维护 <code>ret</code> ，作为反转后的结果</p></li><li><p>如果 <code>s[i]</code> 不是空格，表明当前的单词还未遍历结束，把当前字符添加到 <code>word</code> 头部</p></li><li><p>如果是 <code>s[i]</code> 为空格，并且 <code>word</code> 不为空，则表示当前单词已经遍历完毕</p></li><li><p>把 <code>word+&quot; &quot;</code> 追加到 <code>ret</code> 中,并清空 <code>word</code> 的值,继续遍历</p></li><li><p>遍历到 <code>s</code> 第一个字符为非空格时，不会把最后一个 <code>word</code> 追加到 <code>ret</code> 中，所以在循环结束后单独追加一次 <code>word</code> 到 <code>ret</code> 中</p></li><li><p>由于在循环中追加时加了分隔符空格，所以最后要清除 <code>ret</code> 两头的空格</p></li></ul><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reverseWords</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token comment">// 反转后的结果</span>\n        <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token comment">//当前的一个单词</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当前的单词还未遍历结束</span>\n                word <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> word <span class="token comment">// 当前字符添加到word头部</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 表示当前单词已经遍历完毕</span>\n                ret <span class="token operator">+=</span> word <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token comment">// 更新ret</span>\n                word <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token comment">// 清空word</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n        ret <span class="token operator">+=</span> word\n        <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//清除ret两头的空格</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),d={},u=(0,a(6262).A)(d,[["render",function(n,s){const a=(0,e.g2)("Badge"),d=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.Lk)("h1",t,[(0,e.Lk)("a",o,[(0,e.Lk)("span",null,[(0,e.eW)("反转字符串中的单词 "),(0,e.bF)(a,{text:"中等",type:"warning"})])])]),p,(0,e.Lk)("h3",c,[(0,e.Lk)("a",l,[(0,e.Lk)("span",null,[(0,e.Lk)("a",r,[(0,e.eW)("试一试"),(0,e.bF)(d)])])])]),i])}]]),k=JSON.parse('{"path":"/algorithm/array_string/article21.html","title":"反转字符串中的单词","lang":"zh_CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"试一试","slug":"试一试","link":"#试一试","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"解答","slug":"解答","link":"#解答","children":[]}]}],"git":{"updatedTime":1713948783000,"contributors":[{"name":"颜豪","email":"2825060856@qq.com","commits":2}]},"filePathRelative":"algorithm/array_string/article21.md"}')}}]);